function! Layers()

    " Default layers, recommended!
    Layer 'fzf'
    Layer 'unite'
    Layer 'better-defaults'

    if g:spacevim_nvim
        Layer 'auto-completion'
    else
        Layer 'ycmd'
    endif

    Layer 'syntax-checking'
    Layer 'emoji'
    Layer 'goyo'

    Layer 'html'
    Layer 'c-c++'
    Layer 'java'
    Layer 'go'
    Layer 'python'
    Layer 'markdown'
    Layer 'graphviz'

    " Exclude 'plasticboy/vim-markdown'
    " Exclude 'mzlogin/vim-markdown-toc'
    " Exclude 'iamcco/markdown-preview.vim'

    " Layer 'lightline'
    " Layer 'airline'
    " Layer 'go'
    " Layer 'leader-guide'

    Layer 'chinese'

    Layer 'git'
    " Layer 'github'

    Layer 'text-align'
    Layer 'programming'

endfunction

" You can put your extra plugins here.
function! UserInit()
    " Plug 'mbbill/undotree',             { 'on': 'UndotreeToggle'   }
    " Plug 'hecal3/vim-leader-guide', { 'commit': 'bade1b9dfc5e56aaf322791fff11e350fd8681ae' }
    Plug 'hecal3/vim-leader-guide'
    Plug 'mhinz/vim-grepper'
    " Plug 'yuttie/comfortable-motion.vim'
    " Plug 'blueyed/vim-diminactive'
    " Plug 'colepeters/spacemacs-theme.vim'
    " Plug 'altercation/vim-colors-solarized'
    " Plug 'dracula/vim'
    " Plug 'terryma/vim-expand-region'
    " Plug 'junegunn/vader.vim'
    " Plug 'morhetz/gruvbox'
    " Plug 'junegunn/seoul256.vim'
    " Plug 'tomasr/molokai'
    " Plug 'justinmk/vim-sneak'
    " Plug 'mhinz/vim-grepper'
    " Plug 'tracyone/ctrlp-leader-guide'
    " Plug 'Yggdroot/hiPairs'
    " Plug 'lilydjwg/colorizer'
    " Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    " Plug 'sickill/vim-monokai'
    " Plug 'python-mode/python-mode'
    Plug 'sunaku/vim-shortcut'
    if g:spacevim_nvim
        Plug 'davidhalter/jedi'
        Plug 'zchee/deoplete-jedi', { 'for': 'python' }
    endif
    Plug 'tweekmonster/startuptime.vim'

    " Plug 'roxma/nvim-completion-manager'
    if !has('nvim')
        Plug 'roxma/vim-hug-neovim-rpc'
        inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
        inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
        inoremap <expr> <buffer> <CR> (pumvisible() ? "\<c-y>\<cr>" : "\<CR>")
    endif

endfunction

function! UserConfig()
    autocmd FileType python nnoremap <LocalLeader>i :!isort %<CR><CR>
    autocmd FileType python setlocal completeopt-=preview
    set pumheight=20
    " colorscheme gruvbox
    nnoremap <silent> <leader> :<c-u>LeaderGuide g:mapleader<CR>
    vnoremap <silent> <leader> :<c-u>LeaderGuideVisual g:mapleader<CR>
    let g:pymode_python = 'python3'

    if $TERM_PROGRAM =~# 'iTerm'
        set termguicolors
        " https://github.com/vim/vim/issues/993
        " set Vim-specific sequences for RGB colors
        let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
        let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    endif

    " set noundofile
    let g:airline_powerline_fonts=1
    " Define prefix dictionary
    let g:lmap =  {}

    let g:lmap['a'] = { 'name' : '+align' }
    let g:lmap['b'] = { 'name' : '+buffer' }
    let g:lmap['c'] = { 'name' : '+comment' }
    let g:lmap['w'] = { 'name' : '+window' }
    " let g:lmap.j = { 'name' : '+jump' }
    " Second level dictionaries:
    " let g:lmap.f = { 'name' : '+fold/files' }
    " nmap <silent> <leader>fd :e $MYVIMRC<CR>
    " let g:lmap.f.d = ['e $MYVIMRC', 'Open vimrc']

    " let g:lmap.o = { 'name' : 'Open Stuff' }
    " 'name' is a special field. It will define the name of the group.
    " leader-f is the "File Menu" group.
    " Unnamed groups will show a default string

    " Provide commands and descriptions for existing mappings
    " nmap <silent> <leader>fd :e $MYVIMRC<CR>
    " let g:lmap.f.d = ['e $MYVIMRC', 'Open vimrc']

    " nmap <silent> <leader>fs :so %<CR>
    " let g:lmap.f.s = ['so %', 'Source file']

    " nmap <silent> <leader>oo  :copen<CR>
    " let g:lmap.o.o = ['copen', 'Open quickfix']

    " nmap <silent> <leader>ol  :lopen<CR>
    " let g:lmap.o.l = ['lopen', 'Open locationlist']

    " nmap <silent> <leader>fw :w<CR>
    " let g:lmap.f.w = ['w', 'Write file']

    " Create new menus not based on existing mappings:
    " let g:lmap.g = {
                " \'name' : 'Git Menu',
                " \'s' : ['Gstatus', 'Git Status'],
                " \'p' : ['Gpull',   'Git Pull'],
                " \'u' : ['Gpush',   'Git Push'],
                " \'c' : ['Gcommit', 'Git Commit'],
                " \'w' : ['Gwrite',  'Git Write'],
                " \}

    " If you use NERDCommenter:
    " let g:lmap.c = { 'name' : '+comments' }
    " Define some descriptions
    " let g:lmap.c.c = ['call feedkeys("\<Plug>NERDCommenterComment")','Comment']
    " let g:lmap.c[' '] = ['call feedkeys("\<Plug>NERDCommenterToggle")','Toggle']
    " The Descriptions for other mappings defined by NerdCommenter, will default
    " to their respective commands.
    " call leaderGuide#register_prefix_descriptions("<Space>", "g:lmap")
    " nnoremap <silent> <leader> :<c-u>LeaderGuide '<Space>'<CR>
    " vnoremap <silent> <leader> :<c-u>LeaderGuideVisual '<Space>'<CR>
    hi Comment cterm=italic
    if !exists(':Shortcut')
        call plug#load('vim-shortcut')
        Shortcut! <Leader>fs file save
    endif

    let g:ale_linters['markdown'] = []
    let g:ale_linters['java'] = 'javac'
    if g:spacevim_nvim
        let g:python_host_skip_check=1
        let g:python_host_prog = '/Users/xlc/anaconda3/bin/python'
        let g:python3_host_skip_check=1
        let g:python3_host_prog = '/Users/xlc/anaconda3/bin/python3'
    endif
endfunction

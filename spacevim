" Let Vim and NeoVim shares the same plugin directory.
" Comment it out if you don't like
let g:spacevim_plug_home = '~/.vim/plugged'

" The default leader key is space key.
" Uncomment the line below and modify "<\Space>" if you prefer another
" let g:spacevim_leader = "<\Space>"

" The default local leader key is comma.
" Uncomment the line below and modify ',' if you prefer another
" let g:spacevim_localleader = ','

" Enable the existing layers in space-vim
let g:spacevim_layers = [
      \ 'fzf', 'unite', 'better-defaults',
      \ 'syntax-checking',
      \ 'better-motion', 'file-manager', 'programming', 'editing', 'text-align', 'formatting',
      \ 'go', 'rust', 'graphviz', 'javascript', 'solidity', 'python', 'c-c++', 'markdown',
      \ 'git', 'github', 'chinese', 'latex', 'which-key', 'lsp',
      \ ]

" call remove(g:spacevim_layers, index(g:spacevim_layers, 'syntax-checking'))

let g:spacevim_use_ncm2 = 1 | Layer 'auto-completion'
Layer 'code-snippets'
" Layer 'ycmd'

" Manage your own plugins, refer to vim-plug's instruction for more detials.
function! UserInit()

  " Add plugin via Plug command.
  Plug 'junegunn/seoul256.vim'
  Plug 'lifepillar/vim-gruvbox8'

endfunction

" Override the default settings as well as adding extras
function! UserConfig()
  " If you have installed the powerline fonts and want to enable airline layer
  let g:airline_powerline_fonts=1

  " Use gui colors in terminal if available
  function! s:enable_termgui()
    if has('termguicolors')
      set termguicolors
      if g:spacevim.tmux && !g:spacevim.nvim
        " If use vim inside tmux, see https://github.com/vim/vim/issues/993
        " set Vim-specific sequences for RGB colors
        let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
        let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
      endif
    endif
  endfunction

  if g:spacevim.nvim
    hi Comment gui=NONE
  endif
  hi LineNr ctermbg=NONE guibg=NONE
  hi SpecialComment ctermfg=244 guifg=#768294

  " If your terminal(-emulator) supports true colors, uncomment the line below
  if $TERM_PROGRAM !~? 'Apple_Terminal'
    call s:enable_termgui()
  endif

  let g:python3_host_prg = '/usr/local/bin/python3'

  set list listchars=tab:¦\ ,trail:•,extends:❯,precedes:❮
  set wrap

  nnoremap <LocalLeader>v :call spacevim#plug#fzf#Open()<CR>
  nnoremap <LocalLeader>p :call spacevim#plug#fzf#Rtp()<CR>
  nnoremap <LocalLeader>fc :call spacevim#plug#fzf#FZFCmd()<CR>
  nnoremap <LocalLeader>ff :call spacevim#plug#fzf#Func()<CR>

  let g:ale_sign_error = "◉"
  let g:ale_sign_warning = "◉"
  highlight ALEErrorSign ctermfg=9 guifg=#C30500
  highlight ALEWarningSign ctermfg=11 guifg=#ED6237

  let g:eleline_slim = 1

  let g:ncm2#complete_length = [[1,2],[7,1]]

  let g:rust_recommended_style = 0

  nnoremap <silent> <C-G> :call spacevim#vim#file#CtrlG()<CR>
  inoremap <C-C> <ESC>

  let g:LanguageClient_selectionUI = 'fzf'

  color gruvbox8
  if g:colors_name ==? 'gruvbox8'
    hi! link SpecialComment Comment
    hi Function ctermfg=203 ctermbg=NONE guifg=#fb4934 guibg=NONE guisp=NONE cterm=NONE,bold gui=NONE,bold
    hi Keyword ctermfg=142 ctermbg=NONE guifg=#b8bb26 guibg=NONE guisp=NONE cterm=NONE gui=NONE
    hi CurrentWordTwins cterm=reverse ctermfg=109 ctermbg=235 gui=reverse guifg=#83a598 guibg=#282828
  endif
endfunction

function! Test()
  let old_line = line('.')
  let old_col = col('.')
  let cword = expand('<cword>')
  let str = repeat('-', len(cword)+2)
  call cursor(old_line-1, old_col)
  " if the column number of previous line less than current line, col('.') is the col('$') of previous line
  if col('.') < old_col
    exe "normal a".repeat(' ', old_col-col('.'))
  endif
  call cursor(old_line-1, old_col)
  exe "normal i+".str."+"
  call cursor(old_line, old_col)
  exe "normal i| "
  call cursor(old_line+1, old_col)
  if col('.') < old_col
    exe "normal a".repeat(' ', old_col-col('.'))
  endif
  call cursor(old_line+1, old_col)
  exe "normal i+".str."+"
  call cursor(old_line, old_col+1)
  exe "normal ea |"
  call cursor(old_line, old_col+1)
endfunction

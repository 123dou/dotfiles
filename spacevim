function! UserInit()

    Layer 'ycmd'
    Layer 'syntax-checking'
    " Layer 'auto-completion'

    Layer 'emoji'
    Layer 'goyo'

    Layer 'html'
    Layer 'c-c++'
    Layer 'python'
    Layer 'markdown'
    Layer 'graphviz'

    " Layer 'lightline'
    " Layer 'airline'

    Layer 'chinese'

    Layer 'text-align'
    Layer 'programming'

    " Layer 'latex'
    " Plug 'mbbill/undotree',             { 'on': 'UndotreeToggle'   }
    Layer 'git'
    " Layer 'github'
    " Plug 'hecal3/vim-leader-guide'
    Plug 'yuttie/comfortable-motion.vim'
    " Plug 'blueyed/vim-diminactive'

endfunction


function! UserConfig()

    autocmd FileType python nnoremap <LocalLeader>i :!isort %<CR><CR>
    let g:pymode_python = 'python3'
    " Define prefix dictionary
    " let g:lmap =  {}

    " let g:lmap.a = { 'name' : '+align'}
    " let g:lmap.b = { 'name' : '+buffer'}
    " let g:lmap.c = { 'name' : '+comment'}
    " let g:lmap.j = { 'name' : '+jump'}
    " Second level dictionaries:
    " let g:lmap.f = { 'name' : '+fold/files' }
    " let g:lmap.o = { 'name' : 'Open Stuff' }
    " 'name' is a special field. It will define the name of the group.
    " leader-f is the "File Menu" group.
    " Unnamed groups will show a default string

    " Provide commands and descriptions for existing mappings
    " nmap <silent> <leader>fd :e $MYVIMRC<CR>
    " let g:lmap.f.d = ['e $MYVIMRC', 'Open vimrc']

    " nmap <silent> <leader>fs :so %<CR>
    " let g:lmap.f.s = ['so %', 'Source file']

    " nmap <silent> <leader>oo  :copen<CR>
    " let g:lmap.o.o = ['copen', 'Open quickfix']

    " nmap <silent> <leader>ol  :lopen<CR>
    " let g:lmap.o.l = ['lopen', 'Open locationlist']

    " nmap <silent> <leader>fw :w<CR>
    " let g:lmap.f.w = ['w', 'Write file']

    " Create new menus not based on existing mappings:
    " let g:lmap.g = {
                " \'name' : 'Git Menu',
                " \'s' : ['Gstatus', 'Git Status'],
                " \'p' : ['Gpull',   'Git Pull'],
                " \'u' : ['Gpush',   'Git Push'],
                " \'c' : ['Gcommit', 'Git Commit'],
                " \'w' : ['Gwrite',  'Git Write'],
                " \}

    " If you use NERDCommenter:
    " let g:lmap.c = { 'name' : '+comments' }
    " Define some descriptions
    " let g:lmap.c.c = ['call feedkeys("\<Plug>NERDCommenterComment")','Comment']
    " let g:lmap.c[' '] = ['call feedkeys("\<Plug>NERDCommenterToggle")','Toggle']
    " The Descriptions for other mappings defined by NerdCommenter, will default
    " to their respective commands.
    " call leaderGuide#register_prefix_descriptions("<Space>", "g:lmap")
    " nnoremap <silent> <leader> :<c-u>LeaderGuide '<Space>'<CR>
    " vnoremap <silent> <leader> :<c-u>LeaderGuideVisual '<Space>'<CR>
endfunction
